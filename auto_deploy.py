#!/usr/bin/env python3
"""
Script d'automatisation du d√©ploiement pour Codex AI.
Ce script permet de:
1. Mettre √† jour le site local
2. Commiter les changements
3. Pousser vers la branche master pour d√©clencher le d√©ploiement GitHub Actions
"""

import os
import sys
import subprocess
import argparse
from datetime import datetime

def run_command(command, cwd=None):
    """Ex√©cute une commande shell et retourne la sortie"""
    try:
        result = subprocess.run(command, shell=True, check=True, text=True, 
                               capture_output=True, cwd=cwd)
        return True, result.stdout
    except subprocess.CalledProcessError as e:
        return False, f"Erreur: {e.stderr}"

def git_is_setup():
    """V√©rifie si Git est configur√© avec un remote"""
    success, output = run_command("git remote -v")
    return success and len(output.strip()) > 0

def setup_git_remote(repo_url=None):
    """Configure le d√©p√¥t Git remote si n√©cessaire"""
    if git_is_setup():
        print("‚úÖ D√©p√¥t Git d√©j√† configur√©")
        return True
    
    if not repo_url:
        print("‚ùå URL du d√©p√¥t Git non fournie. Impossible de configurer le remote.")
        return False
    
    # Configurer le remote
    success, output = run_command(f"git remote add origin {repo_url}")
    if not success:
        print(f"‚ùå √âchec de la configuration du remote: {output}")
        return False
    
    print("‚úÖ Remote Git configur√© avec succ√®s")
    return True

def auto_deploy(message=None, repo_url=None):
    """Proc√©dure compl√®te de d√©ploiement automatique"""
    # V√©rifier si nous sommes dans un d√©p√¥t Git
    success, _ = run_command("git rev-parse --is-inside-work-tree")
    if not success:
        print("‚ùå Ce dossier n'est pas un d√©p√¥t Git valide.")
        return False
    
    # Cr√©er un message de commit par d√©faut si non fourni
    if not message:
        now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        message = f"Mise √† jour automatique par Codex AI - {now}"
    
    # Configurer le remote si n√©cessaire
    if repo_url and not git_is_setup():
        if not setup_git_remote(repo_url):
            return False
    
    # 1. Ajouter tous les fichiers modifi√©s
    print("üìù Ajout des fichiers modifi√©s...")
    success, output = run_command("git add .")
    if not success:
        print(f"‚ùå √âchec lors de l'ajout des fichiers: {output}")
        return False
    
    # 2. Cr√©er un commit
    print(f"üì¶ Cr√©ation du commit: {message}")
    success, output = run_command(f"git commit -m \"{message}\"")
    if not success:
        # Si rien √† commiter, pas d'erreur
        if "nothing to commit" in output:
            print("‚ÑπÔ∏è Aucun changement √† commiter.")
            return True
        print(f"‚ùå √âchec lors de la cr√©ation du commit: {output}")
        return False
    
    # 3. Pousser vers la branche master/main
    branch = "master"  # Par d√©faut, on utilise master
    
    # V√©rifier la branche actuelle
    success, current_branch = run_command("git rev-parse --abbrev-ref HEAD")
    if success:
        branch = current_branch.strip()
    
    print(f"üöÄ Envoi des modifications vers la branche {branch}...")
    success, output = run_command(f"git push origin {branch}")
    if not success:
        print(f"‚ùå √âchec lors de l'envoi des modifications: {output}")
        print("üí° Si c'est la premi√®re fois que vous poussez, utilisez: git push -u origin master")
        return False
    
    print("‚úÖ D√©ploiement automatique d√©clench√© avec succ√®s!")
    print("   Le site sera mis √† jour automatiquement par GitHub Actions.")
    print("   Vous pouvez v√©rifier le statut du d√©ploiement dans l'onglet 'Actions' de votre d√©p√¥t GitHub.")
    return True

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Outil de d√©ploiement automatique pour Codex AI")
    parser.add_argument("-m", "--message", help="Message de commit personnalis√©")
    parser.add_argument("-r", "--repo", help="URL du d√©p√¥t Git (seulement pour la configuration initiale)")
    args = parser.parse_args()
    
    auto_deploy(args.message, args.repo)
